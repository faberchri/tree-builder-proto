package clusterer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;


public abstract class AbstractNode<T> implements Node<T>, PrintableNode{
	
	private NodeDistanceCalculator distanceCalculator;
	
	public AbstractNode(NodeDistanceCalculator ndc) {
		this.distanceCalculator = ndc; 
	}
	
	public double getDistance(Node otherNode) {
		return distanceCalculator.calculateDistance(this, otherNode);
	}
	
	String getAttributesString(Map<? extends AbstractNode, T> map) {
//		AbstractNode[] keyArr = (AbstractNode[]) map.keySet().toArray();
		List<AbstractNode> keyList = new ArrayList<AbstractNode>(map.keySet());
		Collections.sort(keyList);
		String s = "";
		for (AbstractNode node : keyArr) {
			s = s.concat(node.toString()).concat(": ").concat(map.get(node).toString()).concat(";\t");
		}
//		for (Map.Entry<? extends AbstractNode, T> entry : map.entrySet()) {
//			s = s.concat(entry.getKey().toString()).concat(": ").concat(entry.getValue().toString()).concat(";\t");
//		}
		if (s.length() == 0) {
			return "no_attributes";
		} else {
			return s.substring(0, s.length()-1);
		}
	}
	
	public abstract int getId();
	
	@Override
	public int compareTo(PrintableNode o) {
		return ((Integer)this.getId()).compareTo((Integer)o.getId());
	}
	
}